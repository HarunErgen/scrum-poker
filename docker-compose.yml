version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - scrum-poker-network

  postgres:
    image: postgres:14-alpine
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - scrum-poker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
      - "443:443"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - backend
    volumes:
      - /etc/letsencrypt/live/scrumpoker.website:/etc/letsencrypt/live/scrumpoker.website:ro
      - /etc/letsencrypt/archive/scrumpoker.website:/etc/letsencrypt/archive/scrumpoker.website:ro
    restart: unless-stopped
    networks:
      - scrum-poker-network

volumes:
  postgres-data:

networks:
  scrum-poker-network:
    driver: bridge
